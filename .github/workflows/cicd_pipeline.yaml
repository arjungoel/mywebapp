name: "Deploying a CI/CD for dotnet core web application using GitHub Actions and storing the application artifacts to Amazon S3"

on:
  workflow_dispatch:
    inputs:
      branchName:
        description: "Provide the branch name"
        type: string
        required: true
      isPremium:
        description: "Adds premium features to the build"
        type: boolean
        required: false
      preferredTheme:
        description: "Frontend theme"
        type: choice
        default: "light"
        options:
          - "dark"
          - "light"
          - "high-contrast"
  
  push:
    branches: [ main ]

jobs:
  
  run-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: false
          OUTPUT_FOLDER: ${{ vars.LINTING_OUTPUT_FOLDER }}
          OUTPUT_DETAILS: detailed
               
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd

    env:
      BUILD_PATH: ${{ secrets.BUILD_PATH }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      GIT_CONFIG_EMAIL: ${{ secrets.GIT_CONFIG_EMAIL }}
      GIT_CONFIG_USERNAME: ${{ secrets.GIT_CONFIG_USERNAME }}
      
    steps:
    
    - name: Echoing Branch Name
      run: echo "Hello ${{ github.event.inputs.branchName }}"
          
    - name: Checkout code repository
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0'
        include-prerelease: True
        
    - name: Print dotnet version
      run: dotnet --version
    - name: Restore dependencies
      run: dotnet restore
      
    # dotnet build and publish
    - name: Build with dotnet
      run: dotnet build --configuration Release  
    - name: Publish the artifacts
      run: dotnet publish -c Release -o ./myapp

    - name: Zip the dotnet build
      shell: powershell
      run: Compress-Archive -Path "${{ env.BUILD_PATH }}\" -DestinationPath "${{ env.BUILD_PATH }}\myapp.zip"
        
    # Push artifacts to S3 bucket
    - name: Set AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Retrieve Commit SHA for the build
      shell: powershell
      run: |
        git config --global user.name ${{ env.GIT_CONFIG_USERNAME }}
        git config --global user.name ${{ env.GIT_CONFIG_EMAIL }}
        $output = git rev-parse --short=4 HEAD
        echo $output
        echo $output > commit_sha.txt
           
    - name: Uploading the application artifacts to Amazon S3
      shell: cmd
      run: |
        aws s3 cp ${{ env.BUILD_PATH }}\myapp.zip s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/
        aws s3 cp commit_sha.txt s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/

        
  deploy:
    needs: build
    runs-on: [ self-hosted, Windows, X64, mywebapp ]
    timeout-minutes: 10
    defaults:
      run:
        shell: cmd
    env:
      RUNNER_WORK_LOCATION: ${{ secrets.RUNNER_WORK_LOCATION }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      IIS_FOLDER: ${{ secrets.IIS_FOLDER }}

    steps:
    - name: Set AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Download the zip file from S3 to EC2 folder
      shell: powershell
      run: aws s3 cp s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/myapp.zip ${{ env.RUNNER_WORK_LOCATION }}
        
    - name: Unzipping the Zip file
      shell: powershell
      run: Expand-Archive -Path ${{ env.RUNNER_WORK_LOCATION }}\myapp.zip -DestinationPath ${{ env.RUNNER_WORK_LOCATION }}\output

    - name: Stop IIS Server
      shell: powershell
      run: iisreset /stop       

    - name: Delete the IIS folder
      shell: powershell
      run: Remove-Item "${{ env.IIS_FOLDER }}\*"  -Recurse
      
    - name: Copy files to wwwroot folder of IIS server
      shell: powershell
      run: Copy-Item -Path ${{ env.RUNNER_WORK_LOCATION }}\output\* -Destination "${{ env.IIS_FOLDER }}" -Recurse -Force

    - name: Start IIS Server
      shell: powershell
      run: iisreset /start

    - name: Download the Commit SHA file from S3 bucket to EC2 location and rename the artifacts file in S3 bucket
      shell: powershell
      run: |
        aws s3 cp s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/commit_sha.txt ${{ env.RUNNER_WORK_LOCATION }}
        $output = cat ${{ env.RUNNER_WORK_LOCATION }}\commit_sha.txt
        aws s3 mv s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/myapp.zip s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/myapp-$output.zip
                
    - name: Delete the unzipped output folder & zipped file to allow new builds gracefully
      shell: powershell
      run: |
        Remove-Item ${{ env.RUNNER_WORK_LOCATION }}\output -Recurse
        Remove-Item ${{ env.RUNNER_WORK_LOCATION }}\myapp.zip
            
    - name: Delete the Commit SHA file from S3 bucket and EC2 instance location 
      shell: powershell
      run: |
        aws s3 rm s3://${{ env.AWS_BUCKET_NAME }}/dotnet-web-app/commit_sha.txt    
        Remove-Item ${{ env.RUNNER_WORK_LOCATION }}\commit_sha.txt
